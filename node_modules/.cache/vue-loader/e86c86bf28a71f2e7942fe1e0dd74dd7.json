{"remainingRequest":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/src/components/MealTableWeekUpdateComponent.vue?vue&type=template&id=568d0585&scoped=true&","dependencies":[{"path":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/src/components/MealTableWeekUpdateComponent.vue","mtime":1605700925055},{"path":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICBfYygic2VjdGlvbiIsIHsgc3RhdGljQ2xhc3M6ICJtZWFsLXRhYmxlLXVwZGF0ZSIgfSwgWwogICAgICBfYygiaDEiLCB7IHN0YXRpY0NsYXNzOiAicGFnZS10aXRsZSIgfSwgW192bS5fdigiVXBkYXRlIGEgTWVhbHBsYW4iKV0pLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MgaGlkZSB0ZXh0LWNlbnRlciIsCiAgICAgICAgICBhdHRyczogeyBpZDogImFsZXJ0LXN1Y2NlcyIsIHJvbGU6ICJhbGVydCIgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLmFsZXJ0U3VjY2VzKSldCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWxlcnQgYWxlcnQtZGFuZ2VyIGhpZGUgdGV4dC1jZW50ZXIiLAogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJhbGVydC1mYWlsZWQiLCByb2xlOiAiYWxlcnQiIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5hbGVydEZhaWxlZCkpXQogICAgICApLAogICAgICBfYygiZm9ybSIsIHsgc3RhdGljQ2xhc3M6ICJtZWFsLXRhYmxlIiwgb246IHsgc3VibWl0OiBfdm0uY2hlY2tGb3JtIH0gfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1yb3cgdGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCBjb2wtMTIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAic2VsZWN0IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnNlbGVjdGVkQ2FsZW5kYXJXZWVrLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInNlbGVjdGVkQ2FsZW5kYXJXZWVrIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIm9wdGlvbk1lbnUiIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBbCiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLCBmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbAogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zZWxlY3RlZENhbGVuZGFyV2VlayA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgICAgICA/ICQkc2VsZWN0ZWRWYWwKICAgICAgICAgICAgICAgICAgICAgICAgICA6ICQkc2VsZWN0ZWRWYWxbMF0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5yZWZyZXNoTWVhbFRhYmxlKF92bS5zZWxlY3RlZENhbGVuZGFyV2VlaykKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJvcHRpb24iLAogICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgdmFsdWU6ICIiLCBkaXNhYmxlZDogIiIsIHNlbGVjdGVkOiAiIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiU2VsZWN0IENhbGVuZGFyIFdlZWsiKV0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS53ZWVrTWVhbFRhYmxlcywgZnVuY3Rpb24od2Vla01lYWxUYWJsZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfYygib3B0aW9uIiwgeyBrZXk6IHdlZWtNZWFsVGFibGUuaWQgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyh3ZWVrTWVhbFRhYmxlLmlkKSArICIgIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS10ZXh0IHRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiVGhlIGdpdmVuIEluZm9ybWF0aW9uIGlzIGF1dG8gZ2VuZXJhdGVkIGFuZCBjYW4gbm90IGJlIG1vZGlmaWVkLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic21hbGwiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS10ZXh0IHRleHQtbXV0ZWQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJjYWxlbmRhckVycm9yTXNnIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJQbGVhc2UgY2hvb3NlIGEgd2Vlay4iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tcm93IiB9LCBbCiAgICAgICAgICBfdm0uX20oMCksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgY29sLTQiIH0sIFsKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZvb2RPbk1vbmRheSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZvb2RPbk1vbmRheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIiwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIG9ua2V5ZG93bjogInJldHVybiBmYWxzZSIgfSwKICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmZvb2RPbk1vbmRheSB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS5mb29kT25Nb25kYXkgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgY29sLTQiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5zZWxlY3RlZEZvb2RNb25kYXksCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInNlbGVjdGVkRm9vZE1vbmRheSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAic2VsZWN0ZWRGb29kTW9uZGF5IiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIKICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF92bS5zZWxlY3RlZEZvb2RNb25kYXkgPSAkZXZlbnQudGFyZ2V0Lm11bHRpcGxlCiAgICAgICAgICAgICAgICAgICAgICA/ICQkc2VsZWN0ZWRWYWwKICAgICAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygib3B0aW9uIiwgeyBhdHRyczogeyB2YWx1ZTogIiIsIHNlbGVjdGVkOiAiIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDaGFuZ2UgdG8iKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLm1lYWxzLCBmdW5jdGlvbihtZWFsKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfYygib3B0aW9uIiwgeyBrZXk6IG1lYWwuaWQgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhtZWFsLmlkKSArCiAgICAgICAgICAgICAgICAgICAgICAgICIsIiArCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhtZWFsLm5hbWUpICsKICAgICAgICAgICAgICAgICAgICAgICAgIiwgIiArCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhtZWFsLnR5cGUpICsKICAgICAgICAgICAgICAgICAgICAgICAgIiwgIiArCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhtZWFsLnByaWNlKSArCiAgICAgICAgICAgICAgICAgICAgICAgICIgIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAyCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzbWFsbCIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLXRleHQgdGV4dC1tdXRlZCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIm1vbmRheUVycm9yTXNnIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJQbGVhc2UgY2hvb3NlIGEgRm9vZC4iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tcm93IiB9LCBbCiAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgY29sLTQiIH0sIFsKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZvb2RPblR1ZXNkYXksCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmb29kT25UdWVzZGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0Iiwgb25rZXlkb3duOiAicmV0dXJuIGZhbHNlIiB9LAogICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uZm9vZE9uVHVlc2RheSB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS5mb29kT25UdWVzZGF5ID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIGNvbC00IiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJzZWxlY3QiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2VsZWN0ZWRGb29kVHVlc2RheSwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic2VsZWN0ZWRGb29kVHVlc2RheSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAic2VsZWN0ZWRGb29kVHVlc2RheSIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICAgICAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9ICJfdmFsdWUiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbAogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBfdm0uc2VsZWN0ZWRGb29kVHVlc2RheSA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgID8gJCRzZWxlY3RlZFZhbAogICAgICAgICAgICAgICAgICAgICAgOiAkJHNlbGVjdGVkVmFsWzBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAib3B0aW9uIiwKICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyB2YWx1ZTogIiIsIGRpc2FibGVkOiAiIiwgc2VsZWN0ZWQ6ICIiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQ2hhbmdlIHRvIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5tZWFscywgZnVuY3Rpb24obWVhbCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoIm9wdGlvbiIsIHsga2V5OiBtZWFsLmlkIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC5pZCkgKwogICAgICAgICAgICAgICAgICAgICAgICAiLCIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC5uYW1lKSArCiAgICAgICAgICAgICAgICAgICAgICAgICIsICIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC50eXBlKSArCiAgICAgICAgICAgICAgICAgICAgICAgICIsICIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC5wcmljZSkgKwogICAgICAgICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic21hbGwiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS10ZXh0IHRleHQtbXV0ZWQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJ0dWVzZGF5RXJyb3JNc2ciIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlBsZWFzZSBjaG9vc2UgYSBGb29kLiIpXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1yb3ciIH0sIFsKICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCBjb2wtNCIgfSwgWwogICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZm9vZE9uV2VkbmVzZGF5LAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZm9vZE9uV2VkbmVzZGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0Iiwgb25rZXlkb3duOiAicmV0dXJuIGZhbHNlIiB9LAogICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uZm9vZE9uV2VkbmVzZGF5IH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgX3ZtLmZvb2RPbldlZG5lc2RheSA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCBjb2wtNCIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic2VsZWN0IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnNlbGVjdGVkRm9vZFdlZG5lc2RheSwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic2VsZWN0ZWRGb29kV2VkbmVzZGF5IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJzZWxlY3RlZEZvb2RXZWRuZXNkYXkiIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcgogICAgICAgICAgICAgICAgICAgICAgLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLCBmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvLnNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSAiX3ZhbHVlIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgX3ZtLnNlbGVjdGVkRm9vZFdlZG5lc2RheSA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgID8gJCRzZWxlY3RlZFZhbAogICAgICAgICAgICAgICAgICAgICAgOiAkJHNlbGVjdGVkVmFsWzBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAib3B0aW9uIiwKICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyB2YWx1ZTogIiIsIGRpc2FibGVkOiAiIiwgc2VsZWN0ZWQ6ICIiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQ2hhbmdlIHRvIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5tZWFscywgZnVuY3Rpb24obWVhbCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoIm9wdGlvbiIsIHsga2V5OiBtZWFsLmlkIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC5pZCkgKwogICAgICAgICAgICAgICAgICAgICAgICAiLCIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC5uYW1lKSArCiAgICAgICAgICAgICAgICAgICAgICAgICIsICIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC50eXBlKSArCiAgICAgICAgICAgICAgICAgICAgICAgICIsICIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC5wcmljZSkgKwogICAgICAgICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic21hbGwiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS10ZXh0IHRleHQtbXV0ZWQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJ3ZWRuZXNkYXlFcnJvck1zZyIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiUGxlYXNlIGNob29zZSBhIEZvb2QuIildCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLXJvdyIgfSwgWwogICAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIGNvbC00IiB9LCBbCiAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5mb29kT25UaHVyc2RheSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZvb2RPblRodXJzZGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0Iiwgb25rZXlkb3duOiAicmV0dXJuIGZhbHNlIiB9LAogICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uZm9vZE9uVGh1cnNkYXkgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBfdm0uZm9vZE9uVGh1cnNkYXkgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgY29sLTQiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5zZWxlY3RlZEZvb2RUaHVyc2RheSwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic2VsZWN0ZWRGb29kVGh1cnNkYXkiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogInNlbGVjdGVkRm9vZFRodXJzZGF5IiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIKICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF92bS5zZWxlY3RlZEZvb2RUaHVyc2RheSA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgID8gJCRzZWxlY3RlZFZhbAogICAgICAgICAgICAgICAgICAgICAgOiAkJHNlbGVjdGVkVmFsWzBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAib3B0aW9uIiwKICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyB2YWx1ZTogIiIsIGRpc2FibGVkOiAiIiwgc2VsZWN0ZWQ6ICIiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQ2hhbmdlIHRvIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5tZWFscywgZnVuY3Rpb24obWVhbCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoIm9wdGlvbiIsIHsga2V5OiBtZWFsLmlkIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC5pZCkgKwogICAgICAgICAgICAgICAgICAgICAgICAiLCIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC5uYW1lKSArCiAgICAgICAgICAgICAgICAgICAgICAgICIsICIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC50eXBlKSArCiAgICAgICAgICAgICAgICAgICAgICAgICIsICIgKwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MobWVhbC5wcmljZSkgKwogICAgICAgICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic21hbGwiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS10ZXh0IHRleHQtbXV0ZWQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJ0aHVyc2RheUVycm9yTXNnIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJQbGVhc2UgY2hvb3NlIGEgRm9vZC4iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tcm93IiB9LCBbCiAgICAgICAgICBfdm0uX20oNCksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgY29sLTQiIH0sIFsKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZvb2RPbkZyaWRheSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZvb2RPbkZyaWRheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIiwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIG9ua2V5ZG93bjogInJldHVybiBmYWxzZSIgfSwKICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmZvb2RPbkZyaWRheSB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS5mb29kT25GcmlkYXkgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgY29sLTQiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5zZWxlY3RlZEZvb2RGcmlkYXksCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInNlbGVjdGVkRm9vZEZyaWRheSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAic2VsZWN0ZWRGb29kRnJpZGF5IiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIKICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF92bS5zZWxlY3RlZEZvb2RGcmlkYXkgPSAkZXZlbnQudGFyZ2V0Lm11bHRpcGxlCiAgICAgICAgICAgICAgICAgICAgICA/ICQkc2VsZWN0ZWRWYWwKICAgICAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm9wdGlvbiIsCiAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgdmFsdWU6ICIiLCBkaXNhYmxlZDogIiIsIHNlbGVjdGVkOiAiIiB9IH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNoYW5nZSB0byIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF92bS5fbChfdm0ubWVhbHMsIGZ1bmN0aW9uKG1lYWwpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJvcHRpb24iLCB7IGtleTogbWVhbC5pZCB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKG1lYWwuaWQpICsKICAgICAgICAgICAgICAgICAgICAgICAgIiwiICsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKG1lYWwubmFtZSkgKwogICAgICAgICAgICAgICAgICAgICAgICAiLCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKG1lYWwudHlwZSkgKwogICAgICAgICAgICAgICAgICAgICAgICAiLCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKG1lYWwucHJpY2UpICsKICAgICAgICAgICAgICAgICAgICAgICAgIiAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNtYWxsIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tdGV4dCB0ZXh0LW11dGVkIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZnJpZGF5RXJyb3JNc2ciIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlBsZWFzZSBjaG9vc2UgYSBGb29kLiIpXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJ1dHRvbiByb3cganVzdGlmeS1jb250ZW50LWNlbnRlciIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1vdXRsaW5lLWRhbmdlciBjb2wtNiIsCiAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uYWRkTWVhbFRhYmxlV2VlayB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiU3VibWl0IildCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogImJ1dHRvbiByb3cganVzdGlmeS1jb250ZW50LWNlbnRlciIgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1vdXRsaW5lLWluZm8gY29sLTYiLAogICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJidXR0b24iLCB0bzogIi93ZWVrbHkiLCB0YWc6ICJidXR0b24iIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIEdvIEJhY2sgIildCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIGNvbC00IiB9LCBbCiAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCB2YWx1ZTogIk1vbmRheSIsIG9ua2V5ZG93bjogInJldHVybiBmYWxzZSIgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIGNvbC00IiB9LCBbCiAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCB2YWx1ZTogIlR1ZXNkYXkiLCBvbmtleWRvd246ICJyZXR1cm4gZmFsc2UiIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCBjb2wtNCIgfSwgWwogICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICB2YWx1ZTogIldlZG5lc2RheSIsCiAgICAgICAgICBwbGFjZWhvbGRlcjogIkZvb2QgTGFiZWwiLAogICAgICAgICAgb25rZXlkb3duOiAicmV0dXJuIGZhbHNlIgogICAgICAgIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCBjb2wtNCIgfSwgWwogICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgdmFsdWU6ICJUaHVyc2RheSIsIG9ua2V5ZG93bjogInJldHVybiBmYWxzZSIgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIGNvbC00IiB9LCBbCiAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCB2YWx1ZTogIkZyaWRheSIsIG9ua2V5ZG93bjogInJldHVybiBmYWxzZSIgfQogICAgICB9KQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}