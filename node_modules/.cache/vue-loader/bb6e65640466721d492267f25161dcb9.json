{"remainingRequest":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/src/components/MealTableWeekComponent.vue?vue&type=template&id=ea6d02e4&scoped=true&","dependencies":[{"path":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/src/components/MealTableWeekComponent.vue","mtime":1605802444990},{"path":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Matien/Documents/Uni/Bachelorarbeit/Prototypen/RWA/frontend/Mensa-FrontEnd-RWA/vue-js-client-crud/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}